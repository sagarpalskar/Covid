{"ast":null,"code":"var _jsxFileName = \"/home/sagarp/Backup/prj/covid/src/map.js\";\nimport React from \"react\";\nimport { VectorMap } from \"react-jvectormap\";\nimport axios from 'axios';\nimport { toast, ToastContainer } from 'react-toastify';\nimport Detailed from './detailed';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass map extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      map: [{\n        code: 'IN-BR',\n        value: 566\n      }, {\n        code: 'IN-PY',\n        value: 800\n      }, {\n        code: 'IN-DD',\n        value: 900\n      }, {\n        code: 'IN-DL',\n        value: 500\n      }, {\n        code: 'IN-NL',\n        value: 1000\n      }, {\n        code: 'IN-HP',\n        value: 10000\n      }, {\n        code: 'IN-HR',\n        value: 800\n      }, {\n        code: 'IN-WB',\n        value: 900\n      }, {\n        code: 'IN-HP',\n        value: 10000\n      }, {\n        code: 'IN-HR',\n        value: 800\n      }, {\n        code: 'IN-AS',\n        value: 1000\n      }, {\n        code: 'IN-UT',\n        value: 14000\n      }, {\n        code: 'IN-UP',\n        value: 300\n      }, {\n        code: 'IN-JK',\n        value: 200\n      }, {\n        code: 'IN-NR',\n        value: 500\n      }, {\n        code: 'IN-JH',\n        value: 500\n      }, {\n        code: 'IN-SK',\n        value: 500\n      }, {\n        code: 'IN-MZ',\n        value: 10000\n      }, {\n        code: 'IN-CT',\n        value: 800\n      }, {\n        code: 'IN-CH',\n        value: 900\n      }, {\n        code: 'IN-GA',\n        value: 500\n      }, {\n        code: 'IN-GJ',\n        value: 1000\n      }, {\n        code: 'IN-RJ',\n        value: 14000\n      }, {\n        code: 'IN-MP',\n        value: 300\n      }, {\n        code: 'IN-OR',\n        value: 200\n      }, {\n        code: 'IN-TN',\n        value: 10000\n      }, {\n        code: 'IN-AN',\n        value: 800\n      }, {\n        code: 'IN-AP',\n        value: 900\n      }, {\n        code: 'IN-AR',\n        value: 500\n      }, {\n        code: 'IN-KA',\n        value: 1000\n      }, {\n        code: 'IN-PB',\n        value: 14000\n      }, {\n        code: 'IN-ML',\n        value: 300\n      }, {\n        code: 'IN-MN',\n        value: 200\n      }, {\n        code: 'IN-MH',\n        value: 300\n      }, {\n        code: 'IN-KL',\n        value: 200\n      }],\n      indiaState: [],\n      data: [],\n      city: ''\n    };\n\n    this.handleClick = (event, code) => {\n      var res = code.replace(\"IN-\", \"\"); // this.setState({ city: res}); \n\n      return /*#__PURE__*/_jsxDEV(Detailed, {\n        city: res\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 14\n      }, this);\n      console.log(`You have click ${code}`);\n      var data = this.getdata(res); //  this.setState({ data: this.getdata(res)}); \n    };\n\n    this.handleshow2 = (e, el, code) => {\n      console.log(\"********************\", code);\n      var res = code.replace(\"IN-\", \"\");\n      el.html(el.html() + `<br>\n      <br> Confirmed cases: ${this.getdata(res).confirmed}<br>\n      <br> Active cases: ${this.getdata(res).active}<br>\n      <br> Deaths cases: ${this.getdata(res).deaths}<br>`);\n    };\n  }\n\n  getdata(key) {\n    var countryData = [];\n    this.state.indiaState.forEach(function (obj) {\n      countryData[obj.statecode] = obj;\n    });\n    return countryData[key];\n  }\n\n  getalldata() {\n    var countryData = [];\n    this.state.indiaState.forEach(function (obj) {\n      countryData[`IN-${obj.statecode}`] = parseInt(obj.active);\n    });\n    console.log(\"***countryData*\", countryData);\n    return countryData;\n  }\n\n  changeBg() {\n    this.refs.map.setBackgroundColor('red');\n  }\n\n  componentDidMount() {\n    // const requestURL = 'api/ListOfChild'\n    // const listofchild = call(get, { url: requestURL});\n    axios.get('https://api.covid19india.org/data.json').then(response => {\n      console.log(\"response****\", response);\n      toast.info(\"success\");\n      this.setState({\n        indiaState: response.data.statewise\n      });\n      console.log(\"****\", this.state.indiaState);\n    }).catch(err => {\n      toast.error(\"Internal Server Error\");\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(VectorMap, {\n      map: 'ca_lcc',\n      map: \"in_mill\",\n      backgroundColor: \"white\",\n      focusOn: {\n        x: 0.5,\n        y: 0.5,\n        scale: 0,\n        animate: false\n      },\n      zoomOnScroll: true,\n      containerStyle: {\n        width: \"100%\",\n        height: \"700px\"\n      },\n      onRegionClick: this.handleClick //gets the country code\n      ,\n      onRegionTipShow: this.handleshow2,\n      containerClassName: \"map\",\n      regionStyle: {\n        initial: {\n          fill: \"#e4e4e4\",\n          \"fill-opacity\": 0.9,\n          stroke: \"none\",\n          \"stroke-width\": 0,\n          \"stroke-opacity\": 0\n        },\n        hover: {\n          \"fill-opacity\": 0.8,\n          cursor: \"pointer\",\n          fill: 'blue'\n        },\n        selected: {\n          fill: 'white'\n        }\n      },\n      regionsSelectable: false,\n      series: {\n        regions: [{\n          values: this.getalldata(),\n          //can be directly served //with api response or any data\n          scale: ['#F8E4E2', '#FC3409'],\n          //color range\n          normalizeFunction: \"polynomial\"\n        }]\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default map;","map":{"version":3,"sources":["/home/sagarp/Backup/prj/covid/src/map.js"],"names":["React","VectorMap","axios","toast","ToastContainer","Detailed","map","Component","state","code","value","indiaState","data","city","handleClick","event","res","replace","console","log","getdata","handleshow2","e","el","html","confirmed","active","deaths","key","countryData","forEach","obj","statecode","getalldata","parseInt","changeBg","refs","setBackgroundColor","componentDidMount","get","then","response","info","setState","statewise","catch","err","error","render","x","y","scale","animate","width","height","initial","fill","stroke","hover","cursor","selected","regions","values","normalizeFunction"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { VectorMap } from \"react-jvectormap\";\nimport axios from 'axios';\nimport { toast, ToastContainer } from 'react-toastify';\nimport Detailed from './detailed';\n\nclass map extends React.Component {\n    state = {   \n        map: [\n                {code: 'IN-BR', value: 566},\n                {code: 'IN-PY', value: 800},\n                {code: 'IN-DD', value: 900},\n                {code: 'IN-DL',value: 500},\n                {code: 'IN-NL',value: 1000},\n                {code: 'IN-HP', value: 10000},\n                {code: 'IN-HR', value: 800},\n                {code: 'IN-WB', value: 900},\n            \n                {code: 'IN-HP', value: 10000},\n                {code: 'IN-HR', value: 800},\n                {code: 'IN-AS',value: 1000},\n                {code: 'IN-UT',value: 14000},\n                {code: 'IN-UP',value: 300},\n                {code: 'IN-JK',value: 200},\n                {code: 'IN-NR',value: 500},\n                {code: 'IN-JH',value: 500},\n                {code: 'IN-SK',value: 500},\n\n                {code: 'IN-MZ', value: 10000},\n                {code: 'IN-CT', value: 800},\n                {code: 'IN-CH', value: 900},\n                {code: 'IN-GA',value: 500},\n                {code: 'IN-GJ',value: 1000},\n                {code: 'IN-RJ',value: 14000},\n                {code: 'IN-MP',value: 300},\n                {code: 'IN-OR',value: 200},\n                {code: 'IN-TN', value: 10000},\n                {code: 'IN-AN', value: 800},\n                {code: 'IN-AP', value: 900},\n                {code: 'IN-AR',value: 500},\n                {code: 'IN-KA',value: 1000},\n                {code: 'IN-PB',value: 14000},\n                {code: 'IN-ML',value: 300},\n                {code: 'IN-MN',value: 200},\n                {code: 'IN-MH',value: 300},\n                {code: 'IN-KL',value: 200},\n            ],\n            indiaState:[],\n            data:[],\n            city:''\n    }\n\n  handleClick = (event, code) => {\n     \n      var res = code.replace(\"IN-\", \"\");\n     // this.setState({ city: res}); \n      return(<Detailed city={res}/>);\n      console.log(`You have click ${code}`)\n      var data =this.getdata(res)\n    //  this.setState({ data: this.getdata(res)}); \n     \n  }\n  getdata(key) {\n      var countryData = [];\n     this.state.indiaState.forEach(function(obj){\n      countryData[obj.statecode] = obj;\n      });\n      return countryData[key];\n      }\n\n   getalldata() {\n   var countryData = [];\n   this.state.indiaState.forEach(function(obj){\n   countryData[`IN-${obj.statecode}`] = parseInt(obj.active);\n   });\n   console.log(\"***countryData*\",countryData) \n\n   return countryData;\n  }\n       \n  changeBg() {\n      this.refs.map.setBackgroundColor('red');\n  }\n\n  handleshow2 = (e, el, code) => {\n      console.log(\"********************\",code)\n      var res = code.replace(\"IN-\", \"\");\n\n      el.html(el.html() + \n      `<br>\n      <br> Confirmed cases: ${this.getdata(res).confirmed}<br>\n      <br> Active cases: ${this.getdata(res).active}<br>\n      <br> Deaths cases: ${this.getdata(res).deaths}<br>`\n       );\n    };\n    componentDidMount() {\n      // const requestURL = 'api/ListOfChild'\n      // const listofchild = call(get, { url: requestURL});\n  \n      axios.get('https://api.covid19india.org/data.json')\n      .then(response => {\n          console.log(\"response****\",response)\n          toast.info(\"success\")\n          this.setState({ indiaState: response.data.statewise}); \n          console.log(\"****\",this.state.indiaState) \n\n      }).catch(err => {\n        toast.error(\"Internal Server Error\")\n      })\n  }\n    render() {\n        return (\n            <VectorMap map={'ca_lcc'}\n                  map={\"in_mill\"}\n                  backgroundColor=\"white\"\n                  focusOn={{\n                    x: 0.5,\n                    y: 0.5,\n                    scale: 0,\n                    animate: false\n                  }}\n                  zoomOnScroll={true}\n                  containerStyle={{\n                  width: \"100%\",\n                  height: \"700px\"\n                  }}\n                  onRegionClick={this.handleClick} //gets the country code\n                  onRegionTipShow={this.handleshow2}\n                  containerClassName=\"map\"\n                  regionStyle={{\n                    initial: {\n                       fill: \"#e4e4e4\",\n                       \"fill-opacity\": 0.9,\n                       stroke: \"none\",\n                       \"stroke-width\": 0,\n                       \"stroke-opacity\": 0\n                    },\n                    hover: {\n                       \"fill-opacity\": 0.8,\n                       cursor: \"pointer\",\n                       fill: 'blue'\n                    },\n                    selected: {\n                        fill: 'white'\n                      },\n                  }}\n                  \n                  regionsSelectable={false}\n                  series={{\n                     regions: [\n                         {\n                          values: this.getalldata(), //can be directly served //with api response or any data\n                          scale: ['#F8E4E2', '#FC3409'], //color range\n                          normalizeFunction: \"polynomial\"\n                         }\n                     ]\n                  }}\n            />\n        )\n    }\n}\nexport default map;\n"]},"metadata":{},"sourceType":"module"}