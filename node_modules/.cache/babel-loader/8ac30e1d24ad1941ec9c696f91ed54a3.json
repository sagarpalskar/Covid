{"ast":null,"code":"var _jsxFileName = \"/home/sagarp/Backup/prj/covid/src/App.js\";\n\n/*import logo from './logo.svg';\nimport './App.css';\nimport {MapContainer,Marker,Popup,TileLayer} from 'react-leaflet';\nimport {Loader, LoaderOptions} from 'google-maps';\n\nfunction App() {\n  const position = [20.5937, 78.9659]\nconst loader = new Loader('my-api-key', options);\n \nconst google = await loader.load();\nconst map = new google.maps.Map(document.getElementById('map'), {\n    center: {lat: -34.397, lng: 150.644},\n    zoom: 8,\n});\n\n  return (\n    <div >\n     <b>Hello</b>\n     <MapContainer center={position} zoom={13} >\n    <TileLayer\n      attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n      url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n    />\n    <Marker position={position}>\n      <Popup>\n        A pretty CSS3 popup. <br /> Easily customizable.\n      </Popup>\n    </Marker>\n  </MapContainer>\n    </div>\n  );\n}\n\nexport default App;\n*/\nimport React from \"react\";\nimport { VectorMap } from \"react-jvectormap\";\n/*const map = [\n  {code: IN-RJ,\n  value: 10000},\n  {code: IN-MP,\n  value: 800},\n  {code: IN-DL,\n  value: 900},\n  {code: IN-KL,\n  value: 500},\n];\ngetdata = (key) => {\n  var countryData = [];\n  map.forEach(function(obj){\n  countryData[obj.code] = obj.value;\n  });\n  return countryData[key];\n}\ngetalldata = () => {\n  var countryData = [];\n  map.forEach(function(obj){\n  countryData[obj.code] = obj.value;\n  });\n  return countryData;\n};\n//getdata(key) is function that maps code to the value of array (JSON)and it return only value specific state code\nhandleshow2 = (e, el, code) => {\n  el.html(el.html() + ` <br> Statics: ${this.getdata(code)}`)\n};*/\n//on hover on state, it call getdata(with state code) and display it on screen\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(VectorMap, {\n      map: \"in_mill\",\n      backgroundColor: \"transparent\",\n      focusOn: {\n        x: 0.5,\n        y: 0.5,\n        scale: 0,\n        animate: false\n      },\n      zoomOnScroll: true,\n      containerStyle: {\n        width: \"100%\",\n        height: \"500px\"\n      },\n      onRegionClick: console.log(countryCode) //gets the country                         code\n      ,\n      onRegionTipShow: this.handleshow2,\n      containerClassName: \"map\",\n      regionStyle: {\n        initial: {\n          fill: \"#e4e4e4\",\n          \"fill-opacity\": 0.9,\n          stroke: \"none\",\n          \"stroke-width\": 0,\n          \"stroke-opacity\": 0\n        },\n        hover: {\n          \"fill-opacity\": 0.8,\n          cursor: \"pointer\"\n        },\n        selected: {\n          fill: \"#2938bc\" // onclick colour of state\n\n        }\n      },\n      regionsSelectable: false,\n      series: {\n        regions: [{\n          values: this.getalldata(),\n          //can be directly served //with api response or any data\n          scale: ['#C8EEFF', '#0071A4'],\n          //color range\n          normalizeFunction: \"polynomial\"\n        }]\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n};\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/sagarp/Backup/prj/covid/src/App.js"],"names":["React","VectorMap","App","x","y","scale","animate","width","height","console","log","countryCode","handleshow2","initial","fill","stroke","hover","cursor","selected","regions","values","getalldata","normalizeFunction"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AACA,MAAMC,GAAG,GAAG,MAAM;AAChB,sBACE;AAAA,2BACE,QAAC,SAAD;AACE,MAAA,GAAG,EAAE,SADP;AAEE,MAAA,eAAe,EAAC,aAFlB;AAGE,MAAA,OAAO,EAAE;AACPC,QAAAA,CAAC,EAAE,GADI;AAEPC,QAAAA,CAAC,EAAE,GAFI;AAGPC,QAAAA,KAAK,EAAE,CAHA;AAIPC,QAAAA,OAAO,EAAE;AAJF,OAHX;AASE,MAAA,YAAY,EAAE,IAThB;AAUE,MAAA,cAAc,EAAE;AAChBC,QAAAA,KAAK,EAAE,MADS;AAEhBC,QAAAA,MAAM,EAAE;AAFQ,OAVlB;AAcE,MAAA,aAAa,EAAEC,OAAO,CAACC,GAAR,CAAYC,WAAZ,CAdjB,CAc2C;AAd3C;AAeE,MAAA,eAAe,EAAE,KAAKC,WAfxB;AAgBE,MAAA,kBAAkB,EAAC,KAhBrB;AAiBE,MAAA,WAAW,EAAE;AACXC,QAAAA,OAAO,EAAE;AACNC,UAAAA,IAAI,EAAE,SADA;AAEN,0BAAgB,GAFV;AAGNC,UAAAA,MAAM,EAAE,MAHF;AAIN,0BAAgB,CAJV;AAKN,4BAAkB;AALZ,SADE;AAQXC,QAAAA,KAAK,EAAE;AACJ,0BAAgB,GADZ;AAEJC,UAAAA,MAAM,EAAE;AAFJ,SARI;AAYXC,QAAAA,QAAQ,EAAE;AACPJ,UAAAA,IAAI,EAAE,SADC,CACS;;AADT;AAZC,OAjBf;AAiCE,MAAA,iBAAiB,EAAE,KAjCrB;AAkCE,MAAA,MAAM,EAAE;AACLK,QAAAA,OAAO,EAAE,CACL;AACCC,UAAAA,MAAM,EAAE,KAAKC,UAAL,EADT;AAC4B;AAC3BhB,UAAAA,KAAK,EAAE,CAAC,SAAD,EAAY,SAAZ,CAFR;AAEgC;AAC/BiB,UAAAA,iBAAiB,EAAE;AAHpB,SADK;AADJ;AAlCV;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAgDD,CAjDD;;KAAMpB,G;AAkDN,eAAeA,GAAf","sourcesContent":["/*import logo from './logo.svg';\nimport './App.css';\nimport {MapContainer,Marker,Popup,TileLayer} from 'react-leaflet';\nimport {Loader, LoaderOptions} from 'google-maps';\n\nfunction App() {\n  const position = [20.5937, 78.9659]\nconst loader = new Loader('my-api-key', options);\n \nconst google = await loader.load();\nconst map = new google.maps.Map(document.getElementById('map'), {\n    center: {lat: -34.397, lng: 150.644},\n    zoom: 8,\n});\n\n  return (\n    <div >\n     <b>Hello</b>\n     <MapContainer center={position} zoom={13} >\n    <TileLayer\n      attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n      url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n    />\n    <Marker position={position}>\n      <Popup>\n        A pretty CSS3 popup. <br /> Easily customizable.\n      </Popup>\n    </Marker>\n  </MapContainer>\n    </div>\n  );\n}\n\nexport default App;\n*/\n\nimport React from \"react\";\nimport { VectorMap } from \"react-jvectormap\";\n/*const map = [\n  {code: IN-RJ,\n  value: 10000},\n  {code: IN-MP,\n  value: 800},\n  {code: IN-DL,\n  value: 900},\n  {code: IN-KL,\n  value: 500},\n];\ngetdata = (key) => {\n  var countryData = [];\n  map.forEach(function(obj){\n  countryData[obj.code] = obj.value;\n  });\n  return countryData[key];\n}\ngetalldata = () => {\n  var countryData = [];\n  map.forEach(function(obj){\n  countryData[obj.code] = obj.value;\n  });\n  return countryData;\n};\n//getdata(key) is function that maps code to the value of array (JSON)and it return only value specific state code\nhandleshow2 = (e, el, code) => {\n  el.html(el.html() + ` <br> Statics: ${this.getdata(code)}`)\n};*/\n//on hover on state, it call getdata(with state code) and display it on screen\nconst App = () => {\n  return (\n    <div>\n      <VectorMap\n        map={\"in_mill\"}\n        backgroundColor=\"transparent\"\n        focusOn={{\n          x: 0.5,\n          y: 0.5,\n          scale: 0,\n          animate: false\n        }}\n        zoomOnScroll={true}\n        containerStyle={{\n        width: \"100%\",\n        height: \"500px\"\n        }}\n        onRegionClick={console.log(countryCode)} //gets the country                         code\n        onRegionTipShow={this.handleshow2}\n        containerClassName=\"map\"\n        regionStyle={{\n          initial: {\n             fill: \"#e4e4e4\",\n             \"fill-opacity\": 0.9,\n             stroke: \"none\",\n             \"stroke-width\": 0,\n             \"stroke-opacity\": 0\n          },\n          hover: {\n             \"fill-opacity\": 0.8,\n             cursor: \"pointer\"\n          },\n          selected: {\n             fill: \"#2938bc\" // onclick colour of state\n          },\n        }}\n        regionsSelectable={false}\n        series={{\n           regions: [\n               {\n                values: this.getalldata(), //can be directly served //with api response or any data\n                scale: ['#C8EEFF', '#0071A4'], //color range\n                normalizeFunction: \"polynomial\"\n               }\n           ]\n        }}\n/>\n</div>\n  );\n};\nexport default App;"]},"metadata":{},"sourceType":"module"}