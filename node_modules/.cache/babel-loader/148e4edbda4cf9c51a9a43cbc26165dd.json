{"ast":null,"code":"var _jsxFileName = \"/home/sagarp/Backup/prj/covid/src/map.js\";\nimport React from \"react\";\nimport { VectorMap } from \"react-jvectormap\";\nimport axios from 'axios';\nimport { toast, ToastContainer } from 'react-toastify';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass map extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.handleClick = (event, code) => {\n      console.log(`You have click ${code}`);\n      var res = code.replace(\"IN-\", \"\");\n      var data = this.getdata(res); //  this.setState({ data: this.getdata(res)}); \n    };\n\n    this.handleshow2 = (e, el, code) => {\n      console.log(\"********************\", code);\n      var res = code.replace(\"IN-\", \"\");\n      el.html(el.html() + `<br>\n      <br> Confirmed cases: ${this.getdata(res).confirmed}<br>\n      <br> Active cases: ${this.getdata(res).active}<br>\n      <br> Deaths cases: ${this.getdata(res).deaths}<br>`);\n    };\n  }\n\n  getdata(key) {\n    var countryData = [];\n    this.state.indiaState.forEach(function (obj) {\n      countryData[obj.statecode] = obj;\n    });\n    return countryData[key];\n  }\n\n  getalldata() {\n    var countryData = [];\n    this.state.indiaState.forEach(function (obj) {\n      countryData[`IN-${obj.statecode}`] = parseInt(obj.active);\n    });\n    console.log(\"***countryData*\", countryData);\n    return countryData;\n  }\n\n  changeBg() {\n    this.refs.map.setBackgroundColor('red');\n  }\n\n  componentDidMount() {\n    // const requestURL = 'api/ListOfChild'\n    // const listofchild = call(get, { url: requestURL});\n    axios.get('https://api.covid19india.org/data.json').then(response => {\n      console.log(\"response****\", response);\n      toast.info(\"success\");\n      this.setState({\n        indiaState: response.data.statewise\n      });\n      console.log(\"****\", this.state.indiaState);\n    }).catch(err => {\n      toast.error(\"Internal Server Error\");\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(VectorMap, {\n      map: 'ca_lcc',\n      map: \"in_mill\",\n      backgroundColor: \"white\",\n      focusOn: {\n        x: 0.5,\n        y: 0.5,\n        scale: 0,\n        animate: false\n      },\n      zoomOnScroll: true,\n      containerStyle: {\n        width: \"100%\",\n        height: \"700px\"\n      },\n      onRegionClick: this.handleClick //gets the country code\n      ,\n      onRegionTipShow: this.handleshow2,\n      containerClassName: \"map\",\n      regionStyle: {\n        initial: {\n          fill: \"#e4e4e4\",\n          \"fill-opacity\": 0.9,\n          stroke: \"none\",\n          \"stroke-width\": 0,\n          \"stroke-opacity\": 0\n        },\n        hover: {\n          \"fill-opacity\": 0.8,\n          cursor: \"pointer\",\n          fill: 'blue'\n        },\n        selected: {\n          fill: 'white'\n        }\n      },\n      regionsSelectable: false,\n      series: {\n        regions: [{\n          values: this.getalldata(),\n          //can be directly served //with api response or any data\n          scale: ['#F8E4E2', '#FC3409'],\n          //color range\n          normalizeFunction: \"polynomial\"\n        }]\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default map;","map":{"version":3,"sources":["/home/sagarp/Backup/prj/covid/src/map.js"],"names":["React","VectorMap","axios","toast","ToastContainer","map","Component","handleClick","event","code","console","log","res","replace","data","getdata","handleshow2","e","el","html","confirmed","active","deaths","key","countryData","state","indiaState","forEach","obj","statecode","getalldata","parseInt","changeBg","refs","setBackgroundColor","componentDidMount","get","then","response","info","setState","statewise","catch","err","error","render","x","y","scale","animate","width","height","initial","fill","stroke","hover","cursor","selected","regions","values","normalizeFunction"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { VectorMap } from \"react-jvectormap\";\nimport axios from 'axios';\nimport { toast, ToastContainer } from 'react-toastify';\n\nclass map extends React.Component {\n    handleClick = (event, code) => {\n        console.log(`You have click ${code}`)\n        var res = code.replace(\"IN-\", \"\");\n        var data =this.getdata(res)\n      //  this.setState({ data: this.getdata(res)}); \n       \n    }\n  getdata(key) {\n      var countryData = [];\n     this.state.indiaState.forEach(function(obj){\n      countryData[obj.statecode] = obj;\n      });\n      return countryData[key];\n      }\n\n   getalldata() {\n   var countryData = [];\n   this.state.indiaState.forEach(function(obj){\n   countryData[`IN-${obj.statecode}`] = parseInt(obj.active);\n   });\n   console.log(\"***countryData*\",countryData) \n\n   return countryData;\n  }\n       \n  changeBg() {\n      this.refs.map.setBackgroundColor('red');\n  }\n\n  handleshow2 = (e, el, code) => {\n      console.log(\"********************\",code)\n      var res = code.replace(\"IN-\", \"\");\n\n      el.html(el.html() + \n      `<br>\n      <br> Confirmed cases: ${this.getdata(res).confirmed}<br>\n      <br> Active cases: ${this.getdata(res).active}<br>\n      <br> Deaths cases: ${this.getdata(res).deaths}<br>`\n       );\n    };\n    componentDidMount() {\n      // const requestURL = 'api/ListOfChild'\n      // const listofchild = call(get, { url: requestURL});\n  \n      axios.get('https://api.covid19india.org/data.json')\n      .then(response => {\n          console.log(\"response****\",response)\n          toast.info(\"success\")\n          this.setState({ indiaState: response.data.statewise}); \n          console.log(\"****\",this.state.indiaState) \n\n      }).catch(err => {\n        toast.error(\"Internal Server Error\")\n      })\n  }\n    render() {\n        return (\n            <VectorMap map={'ca_lcc'}\n                  map={\"in_mill\"}\n                  backgroundColor=\"white\"\n                  focusOn={{\n                    x: 0.5,\n                    y: 0.5,\n                    scale: 0,\n                    animate: false\n                  }}\n                  zoomOnScroll={true}\n                  containerStyle={{\n                  width: \"100%\",\n                  height: \"700px\"\n                  }}\n                  onRegionClick={this.handleClick} //gets the country code\n                  onRegionTipShow={this.handleshow2}\n                  containerClassName=\"map\"\n                  regionStyle={{\n                    initial: {\n                       fill: \"#e4e4e4\",\n                       \"fill-opacity\": 0.9,\n                       stroke: \"none\",\n                       \"stroke-width\": 0,\n                       \"stroke-opacity\": 0\n                    },\n                    hover: {\n                       \"fill-opacity\": 0.8,\n                       cursor: \"pointer\",\n                       fill: 'blue'\n                    },\n                    selected: {\n                        fill: 'white'\n                      },\n                  }}\n                  \n                  regionsSelectable={false}\n                  series={{\n                     regions: [\n                         {\n                          values: this.getalldata(), //can be directly served //with api response or any data\n                          scale: ['#F8E4E2', '#FC3409'], //color range\n                          normalizeFunction: \"polynomial\"\n                         }\n                     ]\n                  }}\n            />\n        )\n    }\n}\nexport default map;\n"]},"metadata":{},"sourceType":"module"}