{"ast":null,"code":"var _jsxFileName = \"/home/sagarp/Backup/prj/covid/src/App.js\";\n\n/*import logo from './logo.svg';\nimport './App.css';\nimport {MapContainer,Marker,Popup,TileLayer} from 'react-leaflet';\nimport {Loader, LoaderOptions} from 'google-maps';\n\nfunction App() {\n  const position = [20.5937, 78.9659]\nconst loader = new Loader('my-api-key', options);\n \nconst google = await loader.load();\nconst map = new google.maps.Map(document.getElementById('map'), {\n    center: {lat: -34.397, lng: 150.644},\n    zoom: 8,\n});\n\n  return (\n    <div >\n     <b>Hello</b>\n     <MapContainer center={position} zoom={13} >\n    <TileLayer\n      attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n      url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n    />\n    <Marker position={position}>\n      <Popup>\n        A pretty CSS3 popup. <br /> Easily customizable.\n      </Popup>\n    </Marker>\n  </MapContainer>\n    </div>\n  );\n}\n\nexport default App;\n*/\nimport React from \"react\";\nimport { VectorMap } from \"react-jvectormap\"; //on hover on state, it call getdata(with state code) and display it on screen\n//const App = () => {\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.getdata = key => {\n      var countryData = [];\n      map.forEach(function (obj) {\n        countryData[obj.code] = obj.value;\n      });\n      return countryData[key];\n    };\n\n    this.getalldata = () => {\n      var countryData = [];\n      map.forEach(function (obj) {\n        countryData[obj.code] = obj.value;\n      });\n      return countryData;\n    };\n\n    this.handleshow2 = (e, el, code) => {\n      el.html(el.html() + ` <br> Statics: ${this.getdata(code)}`);\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(VectorMap, {\n        map: \"in_mill\",\n        backgroundColor: \"transparent\",\n        focusOn: {\n          x: 0.5,\n          y: 0.5,\n          scale: 0,\n          animate: false\n        },\n        zoomOnScroll: true,\n        containerStyle: {\n          width: \"100%\",\n          height: \"500px\"\n        },\n        onRegionClick: console.log(countryCode) //gets the country                         code\n        ,\n        onRegionTipShow: this.handleshow2,\n        containerClassName: \"map\",\n        regionStyle: {\n          initial: {\n            fill: \"#e4e4e4\",\n            \"fill-opacity\": 0.9,\n            stroke: \"none\",\n            \"stroke-width\": 0,\n            \"stroke-opacity\": 0\n          },\n          hover: {\n            \"fill-opacity\": 0.8,\n            cursor: \"pointer\"\n          },\n          selected: {\n            fill: \"#2938bc\" // onclick colour of state\n\n          }\n        },\n        regionsSelectable: false,\n        series: {\n          regions: [{\n            values: this.getalldata(),\n            //can be directly served //with api response or any data\n            scale: ['#C8EEFF', '#0071A4'],\n            //color range\n            normalizeFunction: \"polynomial\"\n          }]\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 5\n    }, this);\n  }\n\n}\n\nApp.map = [{\n  code: IN - RJ,\n  value: 10000\n}, {\n  code: IN - MP,\n  value: 800\n}, {\n  code: IN - DL,\n  value: 900\n}, {\n  code: IN - KL,\n  value: 500\n}];\nexport default App;","map":{"version":3,"sources":["/home/sagarp/Backup/prj/covid/src/App.js"],"names":["React","VectorMap","App","Component","getdata","key","countryData","map","forEach","obj","code","value","getalldata","handleshow2","e","el","html","render","x","y","scale","animate","width","height","console","log","countryCode","initial","fill","stroke","hover","cursor","selected","regions","values","normalizeFunction","IN","RJ","MP","DL","KL"],"mappings":"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","sourcesContent":["/*import logo from './logo.svg';\nimport './App.css';\nimport {MapContainer,Marker,Popup,TileLayer} from 'react-leaflet';\nimport {Loader, LoaderOptions} from 'google-maps';\n\nfunction App() {\n  const position = [20.5937, 78.9659]\nconst loader = new Loader('my-api-key', options);\n \nconst google = await loader.load();\nconst map = new google.maps.Map(document.getElementById('map'), {\n    center: {lat: -34.397, lng: 150.644},\n    zoom: 8,\n});\n\n  return (\n    <div >\n     <b>Hello</b>\n     <MapContainer center={position} zoom={13} >\n    <TileLayer\n      attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n      url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n    />\n    <Marker position={position}>\n      <Popup>\n        A pretty CSS3 popup. <br /> Easily customizable.\n      </Popup>\n    </Marker>\n  </MapContainer>\n    </div>\n  );\n}\n\nexport default App;\n*/\n\nimport React from \"react\";\nimport { VectorMap } from \"react-jvectormap\";\n\n\n//on hover on state, it call getdata(with state code) and display it on screen\n//const App = () => {\n  class App extends React.Component {\n    static map = [\n      {code: IN-RJ,\n      value: 10000},\n      {code: IN-MP,\n      value: 800},\n      {code: IN-DL,\n      value: 900},\n      {code: IN-KL,\n      value: 500},\n    ];\n    getdata = (key) => {\n      var countryData = [];\n      map.forEach(function(obj){\n      countryData[obj.code] = obj.value;\n      });\n      return countryData[key];\n    }\n    getalldata = () => {\n      var countryData = [];\n      map.forEach(function(obj){\n      countryData[obj.code] = obj.value;\n      });\n      return countryData;\n    };\n    //getdata(key) is function that maps code to the value of array (JSON)and it return only value specific state code\n    handleshow2 = (e, el, code) => {\n      el.html(el.html() + ` <br> Statics: ${this.getdata(code)}`)\n    };\n    render() {\n  return (\n    <div>\n      <VectorMap\n        map={\"in_mill\"}\n        backgroundColor=\"transparent\"\n        focusOn={{\n          x: 0.5,\n          y: 0.5,\n          scale: 0,\n          animate: false\n        }}\n        zoomOnScroll={true}\n        containerStyle={{\n        width: \"100%\",\n        height: \"500px\"\n        }}\n        onRegionClick={console.log(countryCode)} //gets the country                         code\n        onRegionTipShow={this.handleshow2}\n        containerClassName=\"map\"\n        regionStyle={{\n          initial: {\n             fill: \"#e4e4e4\",\n             \"fill-opacity\": 0.9,\n             stroke: \"none\",\n             \"stroke-width\": 0,\n             \"stroke-opacity\": 0\n          },\n          hover: {\n             \"fill-opacity\": 0.8,\n             cursor: \"pointer\"\n          },\n          selected: {\n             fill: \"#2938bc\" // onclick colour of state\n          },\n        }}\n        regionsSelectable={false}\n        series={{\n           regions: [\n               {\n                values: this.getalldata(), //can be directly served //with api response or any data\n                scale: ['#C8EEFF', '#0071A4'], //color range\n                normalizeFunction: \"polynomial\"\n               }\n           ]\n        }}\n/>\n</div>\n  );\n}}\nexport default App;"]},"metadata":{},"sourceType":"module"}